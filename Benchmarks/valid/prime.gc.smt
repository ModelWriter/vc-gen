(declare-fun p() Int)
(declare-fun i() Int)
(declare-fun n() Int)
(declare-fun j() Int)
(declare-fun i!1() Int)
(declare-fun i?0() Int)
(declare-fun p?1() Int)
(declare-fun p!1() Int)
(declare-fun p?2() Int)
(declare-fun i?3() Int)
(declare-fun p?4() Int)
(declare-fun p!0() Int)
(declare-fun i?5() Int)
(declare-fun i!0() Int)

(assert (not (=> (<= 2 n) (=> (= i!0 i) (=> (= i?5 2) (=> (= p!0 p) (=> (= p?4 1) (and (<= i?5 n) (and (=> (= p?4 1) (forall ((j Int)) (=> (and (<= 2 j) (< j i?5)) (not (= (mod n j) 0))))) (=> (<= i?3 n) (=> (=> (= p?2 1) (forall ((j Int)) (=> (and (<= 2 j) (< j i?3)) (not (= (mod n j) 0))))) (and (=> (< i?3 n) (=> (= (mod n i?3) 0) (=> (= p!1 p?2) (=> (= p?1 0) (=> (= i!1 i?3) (=> (= i?0 (+ i!1 1)) (and (<= i?0 n) (and (=> (= p?1 1) (forall ((j Int)) (=> (and (<= 2 j) (< j i?0)) (not (= (mod n j) 0))))) (=> false (and (=> (= p?1 1) (forall ((i Int)) (=> (and (<= 2 i?0) (< i?0 n)) (not (= (mod n i?0) 0))))) true)))))))))) (=> (not (< i?3 n)) (and (=> (= p?2 1) (forall ((i Int)) (=> (and (<= 2 i?3) (< i?3 n)) (not (= (mod n i?3) 0))))) true))))))))))))))
(check-sat)
(exit)
