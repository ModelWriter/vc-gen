(declare-const A Int)
(declare-const lcm Int)
(declare-const B Int)
(declare-const gcd Int)
(declare-const lcm?0 Int)
(declare-const lcm!0 Int)
(declare-const j Int)
(declare-const gcd?1 Int)
(declare-const gcd!1 Int)
(declare-const gcd?2 Int)
(declare-const j?3 Int)
(declare-const j!0 Int)
(declare-const gcd?4 Int)
(declare-const gcd!0 Int)

(assert (not (=> (and (<= 0 A) (<= 0 B)) (=> (or (not (= A 0)) (not (= B 0))) (=> (= gcd!0 gcd) (=> (= gcd?4 1) (=> (= j!0 j) (=> (= j?3 1) (and (and (= (mod A gcd?4) 0) (= (mod B gcd?4) 0)) (=> (and (= (mod A gcd?2) 0) (= (mod B gcd?2) 0)) (and (=> (or (<= j?3 A) (<= j?3 B)) (and (=> (and (= (mod A j?3) 0) (= (mod B j?3) 0)) (=> (= gcd!1 gcd?2) (=> (= gcd?1 j?3) (and (and (= (mod A gcd?1) 0) (= (mod B gcd?1) 0)) (=> false (=> (= lcm!0 lcm) (=> (= lcm?0 (div (* A B) gcd?1)) (and (and (<= A lcm?0) (and (<= lcm?0 (* A B)) (<= B lcm?0))) true)))))))) (=> (not (and (= (mod A j?3) 0) (= (mod B j?3) 0))) (=> true (and (and (= (mod A gcd?2) 0) (= (mod B gcd?2) 0)) (=> false (=> (= lcm!0 lcm) (=> (= lcm?0 (div (* A B) gcd?2)) (and (and (<= A lcm?0) (and (<= lcm?0 (* A B)) (<= B lcm?0))) true))))))))) (=> (not (or (<= j?3 A) (<= j?3 B))) (=> (= lcm!0 lcm) (=> (= lcm?0 (div (* A B) gcd?2)) (and (and (<= A lcm?0) (and (<= lcm?0 (* A B)) (<= B lcm?0))) true)))))))))))))))
(check-sat)
(exit)
