(declare-const index Int)
(declare-const k Int)
(declare-const N Int)
(declare-const a (Array Int Int))
(declare-const key Int)
(declare-const index?0 Int)
(declare-const index!2 Int)
(declare-const index!1 Int)
(declare-const index?1 Int)
(declare-const index?2 Int)
(declare-const index?3 Int)
(declare-const index!0 Int)

(assert (not (=> (=> (<= 0 index) (and (< index N) (= (select a index) key))) (=> (= index!0 index) (=> (= index?3 0) (and (and (<= 0 index?3) (<= index?3 N)) (and (forall ((k Int)) (=> (and (<= 0 k) (< k index?3)) (not (= (select a k) key)))) (=> (and (<= 0 index?2) (<= index?2 N)) (=> (forall ((k Int)) (=> (and (<= 0 k) (< k index?2)) (not (= (select a k) key)))) (and (=> (< index?2 N) (=> (= (select a index?2) key) (=> (= index!1 index?2) (=> (= index?1 (+ index!1 1)) (and (and (<= 0 index?1) (<= index?1 N)) (and (forall ((k Int)) (=> (and (<= 0 k) (< k index?1)) (not (= (select a k) key)))) (=> false (=> (= index!2 index?1) (=> (= index?0 (- 1)) (and (=> (< index?0 0) (forall ((k Int)) (=> (and (<= 0 k) (< k N)) (not (= (select a k) key))))) true)))))))))) (=> (not (< index?2 N)) (=> (= index!2 index?2) (=> (= index?0 (- 1)) (and (=> (< index?0 0) (forall ((k Int)) (=> (and (<= 0 k) (< k N)) (not (= (select a k) key))))) true))))))))))))))
(check-sat)
(exit)
