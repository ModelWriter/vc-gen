(declare-fun n() Int)
(declare-fun p!0() Int)
(declare-fun p() Int)
(declare-fun x!0() Int)
(declare-fun x() Int)
(declare-fun m() Int)
(declare-fun x!1() Int)
(declare-fun p!1() Int)
(declare-fun x!2() Int)
(declare-fun p!2() Int)
(declare-fun p1() Int)

(assert (not (=> (>= n 0) (=> (= p!0 p)  (=> (= p!0 0) (=> (= x!0 x)  (=> (= x!0 0) (and (and (= p!0 (* x!0 m)) (<= x!0 n))   (=> (and (= p!1 (* x!1 m)) (<= x!1 n)) (and ((=> (< x!1 n) (=> (= x!1 x!1)  (=> (= x!2 (+x!1 1)) (=> (= p!1 p!1)  (=> (= p!2 (+p1 m)) (and (and (= p!2 (* x!2 m)) (<= x!2 n)) (=> false) ((and (= p!2 (* n m)) (=> (>= x!2 n) (=> false (and (and (= p!2 (* x!2 m)) (<= x!2 n)) (=> (= p!2 (+p1 m))  (=> (= p!1 p!2) (=> (= x!2 (+x!1 1))  (=> (= x!1 x!2) (=> (< x!2 n)) ((=> (>= x!2 n)) ((and (= p!2 (* n m)) (=> (>= x!2 n) (=> false (and (and (= p!2 (* x!2 m)) (<= x!2 n)) (=> (= p!2 (+p1 m))  (=> (= p!1 p!2) (=> (= x!2 (+x!1 1))  (=> (= x!1 x!2) (=> (< x!2 n))) (and (= p!2 (* n m))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
