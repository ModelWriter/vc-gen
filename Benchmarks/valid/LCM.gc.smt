(declare-fun A() Int)
(declare-fun lcm() Int)
(declare-fun B() Int)
(declare-fun gcd() Int)
(declare-fun lcm?0() Int)
(declare-fun lcm!0() Int)
(declare-fun j() Int)
(declare-fun gcd?1() Int)
(declare-fun gcd!1() Int)
(declare-fun j?2() Int)
(declare-fun gcd?3() Int)
(declare-fun j?4() Int)
(declare-fun j!0() Int)
(declare-fun gcd?5() Int)
(declare-fun gcd!0() Int)

(assert (not (=> (and (<= 0 A) (<= 0 B)) (=> (or (not (= A 0)) (not (= B 0))) (=> (= gcd!0 gcd) (=> (= gcd?5 1) (=> (= j!0 j) (=> (= j?4 1) (and (and (= (mod A gcd?5) 0) (= (mod B gcd?5) 0)) (=> (and (= (mod A gcd?3) 0) (= (mod B gcd?3) 0)) (and (=> (or (<= j?2 A) (<= j?2 B)) (=> (and (= (mod A j?2) 0) (= (mod B j?2) 0)) (=> (= gcd!1 gcd?3) (=> (= gcd?1 j?2) (and (and (= (mod A gcd?1) 0) (= (mod B gcd?1) 0)) (=> false (=> (= lcm!0 lcm) (=> (= lcm?0 (div (* A B) gcd?1)) (and (and (<= A lcm?0) (and (<= lcm?0 (* A B)) (<= B lcm?0))) true))))))))) (=> (not (or (<= j?2 A) (<= j?2 B))) (=> (= lcm!0 lcm) (=> (= lcm?0 (div (* A B) gcd?3)) (and (and (<= A lcm?0) (and (<= lcm?0 (* A B)) (<= B lcm?0))) true)))))))))))))))
(check-sat)
(exit)
